{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0411\u0430\u043b\u0434\u0438\u043d\u043e\u0439 \u0414\u0430\u0440\u044c\u0438 K33401","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33401","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0411\u0430\u043b\u0434\u0438\u043d\u043e\u0439 \u0414\u0430\u0440\u044c\u0438 K33401"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 server.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 8080 )) s . listen ( 1 ) conn , addr = s . accept () while True : data = conn . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. if not data : break conn . sendall ( 'Hello, client.' . encode ( 'utf-8' )) print ( data . decode ( 'utf-8' )) conn . close () client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 8080 )) s . sendall ( 'Hello, server.' . encode ( 'utf-8' )) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0440\u0430\u0437\u0443. data = s . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print ( data . decode ( 'utf-8' )) s . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 server.py from math import sqrt s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 3030 )) s . listen ( 1 ) conn , addr = s . accept () while True : data = conn . recv ( 1024 ) if not data : break list_of_coef = data . decode ( 'utf-8' ) . split ( ',' ) for i in range ( len ( list_of_coef )): list_of_coef [ i ] = int ( list_of_coef [ i ]) #\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u044b d = list_of_coef [ 1 ] ** 2 - 4 * list_of_coef [ 0 ] * list_of_coef [ 2 ] if d < 0 : conn . sendall ( '\u041d\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0439' . encode ( 'utf-8' )) elif d == 0 : result = '\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str ( round ( - list_of_coef [ 1 ] / ( 2 * list_of_coef [ 0 ]), 3 )) conn . sendall ( result . encode ( 'utf-8' )) else : result = '\u041a\u043e\u0440\u043d\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str ( round (( - list_of_coef [ 1 ] - sqrt ( d )) / ( 2 * list_of_coef [ 0 ]), 3 )) + ' ' + str ( round (( - list_of_coef [ 1 ] + sqrt ( d )) / ( 2 * list_of_coef [ 0 ]), 3 )) conn . sendall ( result . encode ( 'utf-8' )) conn . close () client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 3030 )) print ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f' ) a , b , c = map ( int , input () . split ()) s . sendall (( str ( a ) + ',' + str ( b ) + ',' + str ( c )) . encode ( 'utf-8' )) answer = s . recv ( 1024 ) print ( answer . decode ( 'utf-8' )) s . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21163 server.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 555 )) s . listen ( 1 ) while True : conn , addr = s . accept () #\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open ( 'index.html' ) html_content = html_page . read () html_page . close () html_response = 'HTTP/1.0 200 OK \\n ' + html_content conn . sendall ( html_response . encode ( 'utf-8' )) conn . close () client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 555 )) data = s . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print ( data . decode ( 'utf-8' )) s . close () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Test page </ title > </ head > < body > < p > \"Hello, world!\" </ p > </ body > </ html > \u0417\u0430\u0434\u0430\u0447\u0430 \u21164 server.py import threading , socket def send_to_chat ( sender , msg ): for client in clients : if sender != client : client . sendall ( msg ) def handle_client ( cl_sock , cl_addr ): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print ( f 'Client { cl_addr [ 0 ] } : { cl_addr [ 1 ] } join the chat' ) while True : try : message = cl_sock . recv ( 1024 ) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message . decode ( 'utf-8' ) . find ( 'bye' ) != - 1 : #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat ( cl_sock , message ) break elif message . decode ( 'utf-8' ) . find ( 'Error' ) != - 1 : break send_to_chat ( cl_sock , message ) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket . error : print ( f 'Client { cl_addr [ 0 ] } : { cl_addr [ 1 ] } suddenly left' ) break print ( f 'Client { cl_addr [ 0 ] } : { cl_addr [ 1 ] } left the chat' ) clients . remove ( cl_sock ) cl_sock . close () #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = 'localhost' port = 9090 s . bind (( host , port )) s . listen ( 100 ) clients = [] print ( 'Starting chat server' ) while True : try : client_socket , client_address = s . accept () if client_address not in clients : clients . append ( client_socket ) t1 = threading . Thread ( target = handle_client , args = ( client_socket , client_address )) t1 . start () except KeyboardInterrupt : print ( 'Server stopped' ) break s . close () client.py import socket , threading , time shutdown = False def recive (): while not shutdown : try : data = s . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) except socket . error : time . sleep ( 0.5 ) continue s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = 'localhost' port = 9090 s . connect (( host , port )) s . setblocking ( 0 ) alias = input ( \"Name: \" ) print ( 'If you want to leave the chat write: bye' ) rt = threading . Thread ( target = recive ) rt . start () while True : try : message = input () s . sendall (( f ' { alias } :: { message } ' ) . encode ( 'utf-8' )) if message == 'bye' : print ( 'You left the chat' ) shutdown = True break except : s . sendall ( 'Error' . encode ( 'utf-8' )) print ( 'Error. Disconected' ) shutdown = True break s . close () \u0417\u0430\u0434\u0430\u0447\u0430 \u21165 http_server_task_5.py import socket class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . marks = {} def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM , proto = 0 ) try : serv_sock . bind (( self . host , self . port )) serv_sock . listen () while True : client , address = serv_sock . accept () self . serve_client ( client ) except KeyboardInterrupt : serv_sock . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode ( 'utf-8' ) req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . rstrip ( ' \\r\\n ' ) words = req [: data . index ( \" \\n \" )] . split () if len ( words ) != 3 : raise Exception ( 'Malformed request line' ) method , target , ver = words if ver != 'HTTP/1.1' : raise Exception ( 'Unexpected HTTP version' ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' values = target . split ( '?' )[ 1 ] . split ( '&' ) for value in values : a , b = value . split ( '=' ) request [ 'data' ][ a ] = b return request def handle_request ( self , req ): if req [ 'method' ] == 'POST' : return self . handle_post ( req ) else : return self . handle_get () def handle_get ( self ): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label><input name=\"discipline\" /><br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label><input name=\"grade\"/><input type=\"submit\"></form>' for subject in self . marks : body += f '<div><span> { subject } : { self . marks [ subject ] } </span></div>' body += '</div></body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , content_type ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def handle_post ( self , request ): discipline = request [ 'data' ][ 'discipline' ] grade = request [ 'data' ][ 'grade' ] if discipline not in self . marks : self . marks [ discipline ] = [] self . marks [ discipline ] . append ( grade ) return self . handle_get () def send_response ( self , conn , resp ): rfile = conn . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' rfile . write ( status_line . encode ( 'utf-8' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' rfile . write ( header_line . encode ( 'utf-8' )) rfile . write ( b ' \\r\\n ' ) if resp . body : rfile . write ( resp . body ) rfile . flush () rfile . close () # 6. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. if __name__ == '__main__' : host = '127.0.0.1' port = 8000 serv = MyHTTPServer ( host , port ) try : serv . serve_forever () except KeyboardInterrupt : pass","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"server.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 8080 )) s . listen ( 1 ) conn , addr = s . accept () while True : data = conn . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. if not data : break conn . sendall ( 'Hello, client.' . encode ( 'utf-8' )) print ( data . decode ( 'utf-8' )) conn . close () client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 8080 )) s . sendall ( 'Hello, server.' . encode ( 'utf-8' )) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0440\u0430\u0437\u0443. data = s . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print ( data . decode ( 'utf-8' )) s . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lr1/#no2","text":"server.py from math import sqrt s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 3030 )) s . listen ( 1 ) conn , addr = s . accept () while True : data = conn . recv ( 1024 ) if not data : break list_of_coef = data . decode ( 'utf-8' ) . split ( ',' ) for i in range ( len ( list_of_coef )): list_of_coef [ i ] = int ( list_of_coef [ i ]) #\u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u044b d = list_of_coef [ 1 ] ** 2 - 4 * list_of_coef [ 0 ] * list_of_coef [ 2 ] if d < 0 : conn . sendall ( '\u041d\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u0439' . encode ( 'utf-8' )) elif d == 0 : result = '\u041a\u043e\u0440\u0435\u043d\u044c \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str ( round ( - list_of_coef [ 1 ] / ( 2 * list_of_coef [ 0 ]), 3 )) conn . sendall ( result . encode ( 'utf-8' )) else : result = '\u041a\u043e\u0440\u043d\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f: ' + str ( round (( - list_of_coef [ 1 ] - sqrt ( d )) / ( 2 * list_of_coef [ 0 ]), 3 )) + ' ' + str ( round (( - list_of_coef [ 1 ] + sqrt ( d )) / ( 2 * list_of_coef [ 0 ]), 3 )) conn . sendall ( result . encode ( 'utf-8' )) conn . close () client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 3030 )) print ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f' ) a , b , c = map ( int , input () . split ()) s . sendall (( str ( a ) + ',' + str ( b ) + ',' + str ( c )) . encode ( 'utf-8' )) answer = s . recv ( 1024 ) print ( answer . decode ( 'utf-8' )) s . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lr1/#no3","text":"server.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . bind (( 'localhost' , 555 )) s . listen ( 1 ) while True : conn , addr = s . accept () #\u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u043e\u043c html_page = open ( 'index.html' ) html_content = html_page . read () html_page . close () html_response = 'HTTP/1.0 200 OK \\n ' + html_content conn . sendall ( html_response . encode ( 'utf-8' )) conn . close () client.py import socket s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) s . connect (( 'localhost' , 555 )) data = s . recv ( 1024 ) #\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u043e\u043a\u0435\u0442\u0430. print ( data . decode ( 'utf-8' )) s . close () index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Test page </ title > </ head > < body > < p > \"Hello, world!\" </ p > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21163"},{"location":"lr1/#no4","text":"server.py import threading , socket def send_to_chat ( sender , msg ): for client in clients : if sender != client : client . sendall ( msg ) def handle_client ( cl_sock , cl_addr ): #\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 print ( f 'Client { cl_addr [ 0 ] } : { cl_addr [ 1 ] } join the chat' ) while True : try : message = cl_sock . recv ( 1024 ) #\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 if message . decode ( 'utf-8' ) . find ( 'bye' ) != - 1 : #\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043a\u0438\u0434\u0430\u0435\u0442 send_to_chat ( cl_sock , message ) break elif message . decode ( 'utf-8' ) . find ( 'Error' ) != - 1 : break send_to_chat ( cl_sock , message ) #\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0447\u0430\u0442\u0430 except socket . error : print ( f 'Client { cl_addr [ 0 ] } : { cl_addr [ 1 ] } suddenly left' ) break print ( f 'Client { cl_addr [ 0 ] } : { cl_addr [ 1 ] } left the chat' ) clients . remove ( cl_sock ) cl_sock . close () #\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440 s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = 'localhost' port = 9090 s . bind (( host , port )) s . listen ( 100 ) clients = [] print ( 'Starting chat server' ) while True : try : client_socket , client_address = s . accept () if client_address not in clients : clients . append ( client_socket ) t1 = threading . Thread ( target = handle_client , args = ( client_socket , client_address )) t1 . start () except KeyboardInterrupt : print ( 'Server stopped' ) break s . close () client.py import socket , threading , time shutdown = False def recive (): while not shutdown : try : data = s . recv ( 1024 ) . decode ( 'utf-8' ) print ( data ) except socket . error : time . sleep ( 0.5 ) continue s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = 'localhost' port = 9090 s . connect (( host , port )) s . setblocking ( 0 ) alias = input ( \"Name: \" ) print ( 'If you want to leave the chat write: bye' ) rt = threading . Thread ( target = recive ) rt . start () while True : try : message = input () s . sendall (( f ' { alias } :: { message } ' ) . encode ( 'utf-8' )) if message == 'bye' : print ( 'You left the chat' ) shutdown = True break except : s . sendall ( 'Error' . encode ( 'utf-8' )) print ( 'Error. Disconected' ) shutdown = True break s . close ()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21164"},{"location":"lr1/#no5","text":"http_server_task_5.py import socket class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port self . marks = {} def serve_forever ( self ): serv_sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM , proto = 0 ) try : serv_sock . bind (( self . host , self . port )) serv_sock . listen () while True : client , address = serv_sock . accept () self . serve_client ( client ) except KeyboardInterrupt : serv_sock . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode ( 'utf-8' ) req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . rstrip ( ' \\r\\n ' ) words = req [: data . index ( \" \\n \" )] . split () if len ( words ) != 3 : raise Exception ( 'Malformed request line' ) method , target , ver = words if ver != 'HTTP/1.1' : raise Exception ( 'Unexpected HTTP version' ) request = { 'data' : {}, 'method' : method } if '?' in target : request [ 'method' ] = 'POST' values = target . split ( '?' )[ 1 ] . split ( '&' ) for value in values : a , b = value . split ( '=' ) request [ 'data' ][ a ] = b return request def handle_request ( self , req ): if req [ 'method' ] == 'POST' : return self . handle_post ( req ) else : return self . handle_get () def handle_get ( self ): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label><input name=\"discipline\" /><br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label><input name=\"grade\"/><input type=\"submit\"></form>' for subject in self . marks : body += f '<div><span> { subject } : { self . marks [ subject ] } </span></div>' body += '</div></body></html>' body = body . encode ( 'utf-8' ) headers = [( 'Content-Type' , content_type ), ( 'Content-Length' , len ( body ))] return Response ( 200 , 'OK' , headers , body ) def handle_post ( self , request ): discipline = request [ 'data' ][ 'discipline' ] grade = request [ 'data' ][ 'grade' ] if discipline not in self . marks : self . marks [ discipline ] = [] self . marks [ discipline ] . append ( grade ) return self . handle_get () def send_response ( self , conn , resp ): rfile = conn . makefile ( 'wb' ) status_line = f 'HTTP/1.1 { resp . status } { resp . reason } \\r\\n ' rfile . write ( status_line . encode ( 'utf-8' )) if resp . headers : for ( key , value ) in resp . headers : header_line = f ' { key } : { value } \\r\\n ' rfile . write ( header_line . encode ( 'utf-8' )) rfile . write ( b ' \\r\\n ' ) if resp . body : rfile . write ( resp . body ) rfile . flush () rfile . close () # 6. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. if __name__ == '__main__' : host = '127.0.0.1' port = 8000 serv = MyHTTPServer ( host , port ) try : serv . serve_forever () except KeyboardInterrupt : pass","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21165"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c models.py from tabnanny import verbose from django.db import models from django.core.validators import MinValueValidator , MaxValueValidator from django.core.exceptions import ValidationError from django.db.models import Q from datetime import timedelta class Hotel ( models . Model ): name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" , primary_key = True , max_length = 255 ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\" , max_length = 255 ) stars = models . PositiveSmallIntegerField ( \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433\" , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) owner = models . CharField ( \"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f\" , max_length = 255 ) def __str__ ( self ): return f \" { self . stars } -star hotel { self . name } \" class Room ( models . Model ): number_room = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" , primary_key = True ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , verbose_name = \"\u041e\u0442\u0435\u043b\u044c\" ) type_room = models . CharField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" , max_length = 100 ) beds = models . PositiveSmallIntegerField ( \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\" , validators = [ MinValueValidator ( 1 )]) room_price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430\" ) class Meta : # One hotel can't have two rooms with the same number unique_together = ( 'hotel' , 'number_room' ) def __str__ ( self ): return f \"Room { self . number_room } of hotel { self . hotel . name } \" class Guest ( models . Model ): first_name = models . CharField ( \"\u0418\u043c\u044f\" , max_length = 30 , null = False ) last_name = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\" , max_length = 30 , null = False ) passport = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\" , primary_key = True , max_length = 30 ) def __str__ ( self ): return f \"\u0413\u043e\u0441\u0442\u044c { self . last_name } { self . first_name } \" class Reservation ( models . Model ): order_number = models . AutoField ( \"\u041d\u043e\u043c\u0435\u0440 \u0437\u0430\u043a\u0430\u0437\u0430\" , primary_key = True ) room = models . ForeignKey ( Room , on_delete = models . CASCADE ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , default = \"\u0420\u043e\u043c\u0430\u0448\u043a\u0430\" ) guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , verbose_name = \"\u0413\u043e\u0441\u0442\u044c\" ) arrival_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\" ) departure_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\" ) price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\" ) booking_date = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" , auto_now_add = True ) @property def duration ( self ): return ( self . departure_date - self . arrival_date ) . days def clean ( self ): # Check that start < end if self . arrival_date >= self . departure_date : raise ValidationError ( \"Duration date must be greater than start date\" ) def save ( self , * args , ** kwargs ): # Calculate the price based on number of nights at the hotel self . price = self . room . room_price * self . duration super ( Reservation , self ) . save ( * args , ** kwargs ) def __str__ ( self ): return f \"Booking { self . pk } in hotel { self . room . hotel . name } from { self . arrival_date } to { self . departure_date } \" class Comment ( models . Model ): reservation = models . ForeignKey ( Reservation , on_delete = models . CASCADE , verbose_name = \"\u041a\u043e\u0434 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" ) date_start = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\" ) date_end = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\" ) text = models . TextField ( \"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\" , null = False ) rate = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430\" , default = 10 , validators = [ MaxValueValidator ( 10 ), MinValueValidator ( 1 )]) sing_author = models . CharField ( \"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\" , max_length = 30 ) def save ( self , * args , ** kwargs ): # Calculate the price based on number of nights at the hotel self . date_start = self . reservation . arrival_date self . date_end = self . reservation . departure_date super ( Comment , self ) . save ( * args , ** kwargs ) views.py from django.shortcuts import render , redirect from msilib.schema import ListView from django.http import Http404 from .models import Hotel , Reservation , Room , Guest , Comment from django.views.generic import ListView , UpdateView , CreateView , DeleteView from .forms import CreateComment , CreateReservation #\u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b def main_page ( request ): return render ( request , 'main_page.html' ) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class RegGuests ( CreateView ): model = Guest fields = [ \"first_name\" , \"last_name\" , \"passport\" , ] template_name = \"register_guests.html\" #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 class RoomsList ( ListView ): model = Room template_name = 'list_rooms.html' #\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 def create_reservation ( request ): data = {} form = CreateReservation ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , 'create_reservation.html' , data ) #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f def user_book ( request , guest_passport ): need_book = Reservation . objects . filter ( guest = guest_passport ) current_book = { \"object_list\" : need_book } return render ( request , 'users_bookings.html' , current_book ) #\u043e\u0442\u0431\u043e\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 def my_bookings ( request ): try : passport = int ( request . POST . get ( 'passport_user' )) return redirect ( f \"/users_bookings/ { passport } /\" ) except : return render ( request , \"my_bookings.html\" ) #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class UpdateBooking ( UpdateView ): model = Reservation fields = [ 'room' , 'arrival_date' , 'departure_date' ] template_name = 'update_book.html' success_url = '/my_bookings/' #\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class DeleteBooking ( DeleteView ): model = Reservation template_name = 'del_book.html' success_url = '/my_bookings/' #\u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 def create_comment ( request ): data = {} form = CreateComment ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , 'create_comment.html' , data ) #\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 def all_comments ( request ): list_comments = { \"object_list\" : Comment . objects . all ()} return render ( request , 'all_comments.html' , list_comments ) #\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0435\u043b\u044f def get_hotel ( request ): hotel = request . POST . get ( 'hotel_name' ) if hotel : return redirect ( f \"/guests/ { hotel } \" ) else : return render ( request , 'hotel.html' ) def guests_list ( request , hotel_name ): guest_in_hotel = Reservation . objects . filter ( hotel = hotel_name ) . values_list ( 'guest' ) nedeed_guests = Guest . objects . filter ( passport__in = guest_in_hotel ) list_of_guests = { \"object_list\" : nedeed_guests , \"hotel_name\" : hotel_name } return render ( request , 'guests.html' , list_of_guests ) urls.py from django.urls import path from .views import * urlpatterns = [ path ( 'main/' , main_page , name = 'main_page' ), path ( \"registration/\" , RegGuests . as_view (), name = 'reg' ), path ( \"rooms/\" , RoomsList . as_view (), name = 'rooms' ), path ( \"book/\" , create_reservation , name = 'book' ), path ( \"my_bookings/\" , my_bookings , name = 'my_bookings' ), path ( \"users_bookings/<int:guest_passport>/\" , user_book ), path ( \"update_book/<int:pk>\" , UpdateBooking . as_view ()), path ( \"del_book/<int:pk>\" , DeleteBooking . as_view ()), path ( \"comment/\" , create_comment , name = 'comment' ), path ( 'all_comments/' , all_comments , name = 'all_comments' ), path ( 'hotel/' , get_hotel , name = 'hotel_info' ), path ( 'guests/<str:hotel_name>' , guests_list ) ] forms.py from django import forms from .models import Reservation , Comment class CreateReservation ( forms . ModelForm ): class Meta : model = Reservation fields = [ 'room' , 'guest' , 'arrival_date' , 'departure_date' ] class CreateComment ( forms . ModelForm ): class Meta : model = Comment fields = [ 'reservation' , 'text' , 'rate' , 'sing_author' ] \u0412\u0438\u0434\u0435\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e","title":"\u041b\u0430\u0431\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2-1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 - \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1"},{"location":"lr2/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr2/#_2","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439."},{"location":"lr2/#_3","text":"","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lr2/#_4","text":"models.py from tabnanny import verbose from django.db import models from django.core.validators import MinValueValidator , MaxValueValidator from django.core.exceptions import ValidationError from django.db.models import Q from datetime import timedelta class Hotel ( models . Model ): name = models . CharField ( \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" , primary_key = True , max_length = 255 ) address = models . CharField ( \"\u0410\u0434\u0440\u0435\u0441\" , max_length = 255 ) stars = models . PositiveSmallIntegerField ( \"\u0420\u0435\u0439\u0442\u0438\u043d\u0433\" , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) owner = models . CharField ( \"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f\" , max_length = 255 ) def __str__ ( self ): return f \" { self . stars } -star hotel { self . name } \" class Room ( models . Model ): number_room = models . IntegerField ( \"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" , primary_key = True ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , verbose_name = \"\u041e\u0442\u0435\u043b\u044c\" ) type_room = models . CharField ( \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\" , max_length = 100 ) beds = models . PositiveSmallIntegerField ( \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\" , validators = [ MinValueValidator ( 1 )]) room_price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430\" ) class Meta : # One hotel can't have two rooms with the same number unique_together = ( 'hotel' , 'number_room' ) def __str__ ( self ): return f \"Room { self . number_room } of hotel { self . hotel . name } \" class Guest ( models . Model ): first_name = models . CharField ( \"\u0418\u043c\u044f\" , max_length = 30 , null = False ) last_name = models . CharField ( \"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\" , max_length = 30 , null = False ) passport = models . CharField ( \"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\" , primary_key = True , max_length = 30 ) def __str__ ( self ): return f \"\u0413\u043e\u0441\u0442\u044c { self . last_name } { self . first_name } \" class Reservation ( models . Model ): order_number = models . AutoField ( \"\u041d\u043e\u043c\u0435\u0440 \u0437\u0430\u043a\u0430\u0437\u0430\" , primary_key = True ) room = models . ForeignKey ( Room , on_delete = models . CASCADE ) hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE , default = \"\u0420\u043e\u043c\u0430\u0448\u043a\u0430\" ) guest = models . ForeignKey ( Guest , on_delete = models . CASCADE , verbose_name = \"\u0413\u043e\u0441\u0442\u044c\" ) arrival_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\" ) departure_date = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\" ) price = models . PositiveIntegerField ( \"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\" ) booking_date = models . DateTimeField ( \"\u0414\u0430\u0442\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" , auto_now_add = True ) @property def duration ( self ): return ( self . departure_date - self . arrival_date ) . days def clean ( self ): # Check that start < end if self . arrival_date >= self . departure_date : raise ValidationError ( \"Duration date must be greater than start date\" ) def save ( self , * args , ** kwargs ): # Calculate the price based on number of nights at the hotel self . price = self . room . room_price * self . duration super ( Reservation , self ) . save ( * args , ** kwargs ) def __str__ ( self ): return f \"Booking { self . pk } in hotel { self . room . hotel . name } from { self . arrival_date } to { self . departure_date } \" class Comment ( models . Model ): reservation = models . ForeignKey ( Reservation , on_delete = models . CASCADE , verbose_name = \"\u041a\u043e\u0434 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" ) date_start = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\" ) date_end = models . DateField ( \"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\" ) text = models . TextField ( \"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\" , null = False ) rate = models . IntegerField ( \"\u041e\u0446\u0435\u043d\u043a\u0430\" , default = 10 , validators = [ MaxValueValidator ( 10 ), MinValueValidator ( 1 )]) sing_author = models . CharField ( \"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\" , max_length = 30 ) def save ( self , * args , ** kwargs ): # Calculate the price based on number of nights at the hotel self . date_start = self . reservation . arrival_date self . date_end = self . reservation . departure_date super ( Comment , self ) . save ( * args , ** kwargs ) views.py from django.shortcuts import render , redirect from msilib.schema import ListView from django.http import Http404 from .models import Hotel , Reservation , Room , Guest , Comment from django.views.generic import ListView , UpdateView , CreateView , DeleteView from .forms import CreateComment , CreateReservation #\u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b def main_page ( request ): return render ( request , 'main_page.html' ) #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class RegGuests ( CreateView ): model = Guest fields = [ \"first_name\" , \"last_name\" , \"passport\" , ] template_name = \"register_guests.html\" #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 class RoomsList ( ListView ): model = Room template_name = 'list_rooms.html' #\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 def create_reservation ( request ): data = {} form = CreateReservation ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , 'create_reservation.html' , data ) #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f def user_book ( request , guest_passport ): need_book = Reservation . objects . filter ( guest = guest_passport ) current_book = { \"object_list\" : need_book } return render ( request , 'users_bookings.html' , current_book ) #\u043e\u0442\u0431\u043e\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 def my_bookings ( request ): try : passport = int ( request . POST . get ( 'passport_user' )) return redirect ( f \"/users_bookings/ { passport } /\" ) except : return render ( request , \"my_bookings.html\" ) #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class UpdateBooking ( UpdateView ): model = Reservation fields = [ 'room' , 'arrival_date' , 'departure_date' ] template_name = 'update_book.html' success_url = '/my_bookings/' #\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 class DeleteBooking ( DeleteView ): model = Reservation template_name = 'del_book.html' success_url = '/my_bookings/' #\u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 def create_comment ( request ): data = {} form = CreateComment ( request . POST or None ) if form . is_valid (): form . save () data [ 'form' ] = form return render ( request , 'create_comment.html' , data ) #\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 def all_comments ( request ): list_comments = { \"object_list\" : Comment . objects . all ()} return render ( request , 'all_comments.html' , list_comments ) #\u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0435\u043b\u044f def get_hotel ( request ): hotel = request . POST . get ( 'hotel_name' ) if hotel : return redirect ( f \"/guests/ { hotel } \" ) else : return render ( request , 'hotel.html' ) def guests_list ( request , hotel_name ): guest_in_hotel = Reservation . objects . filter ( hotel = hotel_name ) . values_list ( 'guest' ) nedeed_guests = Guest . objects . filter ( passport__in = guest_in_hotel ) list_of_guests = { \"object_list\" : nedeed_guests , \"hotel_name\" : hotel_name } return render ( request , 'guests.html' , list_of_guests ) urls.py from django.urls import path from .views import * urlpatterns = [ path ( 'main/' , main_page , name = 'main_page' ), path ( \"registration/\" , RegGuests . as_view (), name = 'reg' ), path ( \"rooms/\" , RoomsList . as_view (), name = 'rooms' ), path ( \"book/\" , create_reservation , name = 'book' ), path ( \"my_bookings/\" , my_bookings , name = 'my_bookings' ), path ( \"users_bookings/<int:guest_passport>/\" , user_book ), path ( \"update_book/<int:pk>\" , UpdateBooking . as_view ()), path ( \"del_book/<int:pk>\" , DeleteBooking . as_view ()), path ( \"comment/\" , create_comment , name = 'comment' ), path ( 'all_comments/' , all_comments , name = 'all_comments' ), path ( 'hotel/' , get_hotel , name = 'hotel_info' ), path ( 'guests/<str:hotel_name>' , guests_list ) ] forms.py from django import forms from .models import Reservation , Comment class CreateReservation ( forms . ModelForm ): class Meta : model = Reservation fields = [ 'room' , 'guest' , 'arrival_date' , 'departure_date' ] class CreateComment ( forms . ModelForm ): class Meta : model = Comment fields = [ 'reservation' , 'text' , 'rate' , 'sing_author' ]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"},{"location":"lr2/#_5","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e","title":"\u0412\u0438\u0434\u0435\u043e \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"lr3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c models.py - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class User ( AbstractUser ): tel = models . CharField ( verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , max_length = 15 , null = True , blank = True ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' , 'tel' ] def __str__ ( self ): return self . username class BookRoom ( models . Model ): book = models . ForeignKey ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) class Instance ( models . Model ): id_instance = models . AutoField ( \"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\" , primary_key = True ) section = models . CharField ( max_length = 20 , verbose_name = '\u0420\u0430\u0437\u0434\u0435\u043b' ) code = models . CharField ( max_length = 20 , verbose_name = '\u0410\u0440\u0442\u0438\u043a\u0443\u043b' ) year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) conditions = ( ( '\u0445' , '\u0445\u043e\u0440\u043e\u0448\u0435\u0435' ), ( '\u0443' , '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0442\u0430\u0440\u043e\u0435' ), ) condition = models . CharField ( max_length = 1 , choices = conditions , verbose_name = '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430' ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) def __str__ ( self ): return self . code class Book ( models . Model ): id_book = models . AutoField ( \"ID_\u043a\u043d\u0438\u0433\u0438\" , primary_key = True ) name = models . CharField ( max_length = 50 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) author = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\" ) publisher = models . CharField ( max_length = 30 , verbose_name = '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e' ) def __str__ ( self ): return self . name class Reader ( models . Model ): ticket = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430' ) name = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e\" ) passport = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430' ) birth_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f' ) address = models . CharField ( max_length = 100 , verbose_name = '\u0410\u0434\u0440\u0435\u0441' ) phone_number = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430' ) educations = ( ( '\u043d' , '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0440\u0435\u0434\u043d\u0435\u0435' ), ( '\u0432' , '\u0432\u044b\u0441\u0448\u0435\u0435' ), ) education = models . CharField ( max_length = 1 , choices = educations , verbose_name = '\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435' ) degree = models . BooleanField ( default = False , verbose_name = '\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438' ) registration_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438' ) instances = models . ManyToManyField ( 'Instance' , verbose_name = '\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438' , through = 'ReaderBook' , related_name = 'reader_book' ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE , null = True ) def __str__ ( self ): return self . name class ReaderRoom ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430' , null = True ) class ReaderBook ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) book = models . ForeignKey ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438' , null = True ) class Room ( models . Model ): name = models . CharField ( max_length = 20 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) capacity = models . IntegerField ( verbose_name = '\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c' ) books = models . ManyToManyField ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0438' , through = 'BookRoom' , related_name = 'book_room' ) def __str__ ( self ): return self . name views.py - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0441\u0430\u0439\u0442\u0430 #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 class ReaderListAPIView ( ListAPIView ): # permission_classes = [IsAuthenticated] serializer_class = ReaderSerializer queryset = Reader . objects . all () #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f class CreateReader ( CreateAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = ReaderSerializer queryset = Reader . objects . all () #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0431\u0438\u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0435 class BookListAPIView ( ListAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = BookSerializer queryset = Book . objects . all () #\u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0431\u0438\u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0435 class CreateBook ( CreateAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = BookSerializer queryset = Book . objects . all () #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 class InstanceListAPIView ( ListAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = InstanceSerializer queryset = Instance . objects . all () class CreateInstance ( CreateAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = InstanceSerializer queryset = Instance . objects . all () #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 class OneBook ( RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = BookSerializer queryset = Book . objects . all () #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 class OneInstance ( RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = InstanceSerializer queryset = Instance . objects . all () #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 class OneReader ( RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = ReaderSerializer queryset = Instance . objects . all () #\u0431\u0440\u043e\u043d\u044c \u043a\u043d\u0438\u0433\u0438 class BookInstance ( CreateAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () permission_classes = [ IsAuthenticated ] def perform_create ( self , serializer ): serializer . save ( librarian = self . request . user ) #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043d\u0430\u0442 class RoomListAPIView ( ListAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () permission_classes = [ IsAuthenticated ] #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 class RoomCreateAPIView ( CreateAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () permission_classes = [ IsAuthenticated ] #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 class OneRoom ( RetrieveUpdateDestroyAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () permission_classes = [ IsAuthenticated ] #\u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439 class RoomBook ( CreateAPIView ): serializer_class = BookRoomSerializer queryset = BookRoom . objects . all () permission_classes = [ IsAuthenticated ] def perform_create ( self , serializer ): serializer . save ( librarian = self . request . user ) #\u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439 class RoomReader ( CreateAPIView ): serializer_class = ReaderRoomSerializer queryset = ReaderRoom . objects . all () permission_classes = [ IsAuthenticated ] def perform_create ( self , serializer ): serializer . save ( librarian = self . request . user ) serializers.py - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0435\u0439 \u0411\u0414 \u0432 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Python class ReaderSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'books' ) class Meta : model = Reader fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class InstanceSerializer ( serializers . ModelSerializer ): class Meta : model = Instance fields = \"__all__\" class ReaderBookSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'name' ) class Meta : model = Room fields = \"__all__\" class BookRoomSerializer ( serializers . ModelSerializer ): class Meta : model = BookRoom fields = \"__all__\" class ReaderRoomSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderRoom fields = \"__all__\" urls.py - \u0441\u0432\u044f\u0437\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 url - \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 urlpatterns = [ path ( 'readers/list/' , ReaderListAPIView . as_view ()), path ( 'readers/create/' , CreateReader . as_view ()), path ( 'readers/<int:pk>/' , OneReader . as_view ()), path ( 'books/list/' , BookListAPIView . as_view ()), path ( 'books/create/' , CreateBook . as_view ()), path ( 'books/<int:pk>/' , OneBook . as_view ()), path ( 'inst/list/' , InstanceListAPIView . as_view ()), path ( 'inst/create/' , CreateInstance . as_view ()), path ( 'inst/<int:pk>/' , OneInstance . as_view ()), path ( 'rooms/list/' , RoomListAPIView . as_view ()), path ( 'rooms/<int:pk>/' , OneRoom . as_view ()), path ( 'rooms/create/' , RoomCreateAPIView . as_view ()), path ( 'book/inst/' , BookInstance . as_view ()), path ( 'book/room/' , RoomBook . as_view ()), path ( 'book/readers/' , RoomReader . as_view ()), ] API \u041c\u0435\u0442\u043e\u0434 HTTP \u0437\u0430\u043f\u0440\u043e\u0441 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 auth_token_login_create POST /auth/token/login/ \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 auth_token_logout_create POST /auth/token/logout/ \u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b auth_users_activation POST /auth/users/activation/ \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 auth_users_create POST /auth/users/ \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f auth_users_delete DELETE /auth/users/{id}/ \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f auth_users_list GET /auth/users/ \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 auth_users_me_delete DELETE /auth/users/me/ \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f auth_users_me_update PUT /auth/users/me/ \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 auth_users_me_read GET /auth/users/me/ \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 auth_users_read GET /auth/users/{id}/ \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e id auth_users_resend_activation POST /auth/users/resend_activation/ \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0438\u0441\u044c\u043c\u0430 \u043f\u043e \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u0435 auth_users_reset_password POST /auth/users/reset_password/ \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f auth_users_reset_password_confirm POST /auth/users/reset_password_confirm/ \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f) auth_users_reset_username POST /auth/users/reset_username/ \u0421\u043c\u0435\u043d\u0430 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 auth_users_reset_username_confirm POST /auth/users/reset_username_confirm/ \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043c\u0435\u043d\u044b \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043c\u0435\u043d\u044b \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430) auth_users_set_password POST /auth/users/set_password/ \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f auth_users_set_username POST /api/auth/users/set_username/ \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 auth_users_update PUT /auth/users/{id}/ \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e id library_readers_list GET /library/readers/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 library_readers_create POST /library/readers/create/ \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f library_readers_read GET /library/readers/read/{id} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 library_readers_partial_update PUTCH /library/readers/{id} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 library_readers_delete DELETE /library/readers/{id} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f library_books_list GET /library/books/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 library_books_create POST /library/books/create/ \u041f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f library_books_read GET /library/books/read/{id_book} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0438 library_books_partial_update PUTCH /library/books/{id_book} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0438 library_books_delete DELETE /library/books/{id} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f library_inst_list GET /library/inst/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f library_inst_create POST /library/inst/create/ \u041f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 library_inst_read GET /library/inst/read/{id_instance} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0435 library_inst_partial_update PUTCH /library/inst/{id_instance} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0435 library_inst_delete DELETE /library/inst/{id_instance} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 library_rooms_list GET /library/rooms/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 library_rooms_create POST /library/rooms/create/ \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 library_rooms_read GET /library/rooms/read/{id_instance} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 library_rooms_partial_update PUTCH /library/rooms/{id} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u0435 library_rooms_delete DELETE /library/rooms/{id} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b library_book_inst POST /library/book/inst/ \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c library_book_readers POST /library/book/readers/ \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439 library_book_room POST /library/book/room/ \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lr3/#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr3/#2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0422\u0430\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u043e\u0431 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u043a\u043d\u0438\u0433\u0430\u0445, \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u0430\u0445. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0411\u0414 \u0434\u043e\u043b\u0436\u043d\u044b \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438, \u0430\u0432\u0442\u043e\u0440 (\u044b), \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e, \u0433\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f, \u0440\u0430\u0437\u0434\u0435\u043b, \u0447\u0438\u0441\u043b\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0448\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0434\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c. \u041a\u043d\u0438\u0433\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u0437\u0430\u043b\u0435. \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430, \u0424\u0418\u041e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f, \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430, \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f, \u0430\u0434\u0440\u0435\u0441, \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u0427\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0437\u0430\u043b\u043e\u043c, \u043c\u043e\u0433\u0443\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043b \u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0432\u044b\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u043c, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432 \u0437\u0430\u043b\u0435. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043a\u043d\u0438\u0433\u0438 \u0438 \u0441\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435. \u0428\u0438\u0444\u0440 \u043a\u043d\u0438\u0433\u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0430 \u043d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u0435\u0440\u0435\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2. \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430"},{"location":"lr3/#_2","text":"","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lr3/#_3","text":"models.py - \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class User ( AbstractUser ): tel = models . CharField ( verbose_name = '\u0422\u0435\u043b\u0435\u0444\u043e\u043d' , max_length = 15 , null = True , blank = True ) REQUIRED_FIELDS = [ 'first_name' , 'last_name' , 'tel' ] def __str__ ( self ): return self . username class BookRoom ( models . Model ): book = models . ForeignKey ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) class Instance ( models . Model ): id_instance = models . AutoField ( \"ID_\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\" , primary_key = True ) section = models . CharField ( max_length = 20 , verbose_name = '\u0420\u0430\u0437\u0434\u0435\u043b' ) code = models . CharField ( max_length = 20 , verbose_name = '\u0410\u0440\u0442\u0438\u043a\u0443\u043b' ) year = models . IntegerField ( verbose_name = '\u0413\u043e\u0434 \u0438\u0437\u0434\u0430\u043d\u0438\u044f' ) conditions = ( ( '\u0445' , '\u0445\u043e\u0440\u043e\u0448\u0435\u0435' ), ( '\u0443' , '\u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0442\u0430\u0440\u043e\u0435' ), ) condition = models . CharField ( max_length = 1 , choices = conditions , verbose_name = '\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430' ) book = models . ForeignKey ( 'Book' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) def __str__ ( self ): return self . code class Book ( models . Model ): id_book = models . AutoField ( \"ID_\u043a\u043d\u0438\u0433\u0438\" , primary_key = True ) name = models . CharField ( max_length = 50 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) author = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e \u0430\u0432\u0442\u043e\u0440\u0430\" ) publisher = models . CharField ( max_length = 30 , verbose_name = '\u0418\u0437\u0434\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e' ) def __str__ ( self ): return self . name class Reader ( models . Model ): ticket = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430' ) name = models . CharField ( max_length = 70 , verbose_name = \"\u0424\u0418\u041e\" ) passport = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430' ) birth_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f' ) address = models . CharField ( max_length = 100 , verbose_name = '\u0410\u0434\u0440\u0435\u0441' ) phone_number = models . CharField ( max_length = 20 , verbose_name = '\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430' ) educations = ( ( '\u043d' , '\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0435' ), ( '\u0441' , '\u0441\u0440\u0435\u0434\u043d\u0435\u0435' ), ( '\u0432' , '\u0432\u044b\u0441\u0448\u0435\u0435' ), ) education = models . CharField ( max_length = 1 , choices = educations , verbose_name = '\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435' ) degree = models . BooleanField ( default = False , verbose_name = '\u041d\u0430\u043b\u0438\u0447\u0438\u0435 \u0443\u0447\u0435\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438' ) registration_date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438' ) instances = models . ManyToManyField ( 'Instance' , verbose_name = '\u0412\u0437\u044f\u0442\u044b\u0435 \u043a\u043d\u0438\u0433\u0438' , through = 'ReaderBook' , related_name = 'reader_book' ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE , null = True ) def __str__ ( self ): return self . name class ReaderRoom ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) room = models . ForeignKey ( 'Room' , verbose_name = '\u0417\u0430\u043b' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043b\u0430' , null = True ) class ReaderBook ( models . Model ): reader = models . ForeignKey ( 'Reader' , verbose_name = '\u0427\u0438\u0442\u0430\u0442\u0435\u043b\u044c' , on_delete = CASCADE ) book = models . ForeignKey ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0430' , on_delete = CASCADE ) date = models . DateField ( verbose_name = '\u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u043a\u043d\u0438\u0433\u0438' , null = True ) class Room ( models . Model ): name = models . CharField ( max_length = 20 , verbose_name = '\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435' ) capacity = models . IntegerField ( verbose_name = '\u0412\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c' ) books = models . ManyToManyField ( 'Instance' , verbose_name = '\u041a\u043d\u0438\u0433\u0438' , through = 'BookRoom' , related_name = 'book_room' ) def __str__ ( self ): return self . name views.py - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0441\u0430\u0439\u0442\u0430 #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u0445 class ReaderListAPIView ( ListAPIView ): # permission_classes = [IsAuthenticated] serializer_class = ReaderSerializer queryset = Reader . objects . all () #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f class CreateReader ( CreateAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = ReaderSerializer queryset = Reader . objects . all () #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0431\u0438\u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0435 class BookListAPIView ( ListAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = BookSerializer queryset = Book . objects . all () #\u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0431\u0438\u0431\u0438\u043b\u0438\u043e\u0442\u0435\u043a\u0435 class CreateBook ( CreateAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = BookSerializer queryset = Book . objects . all () #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 class InstanceListAPIView ( ListAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = InstanceSerializer queryset = Instance . objects . all () class CreateInstance ( CreateAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = InstanceSerializer queryset = Instance . objects . all () #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 class OneBook ( RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = BookSerializer queryset = Book . objects . all () #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 class OneInstance ( RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = InstanceSerializer queryset = Instance . objects . all () #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 class OneReader ( RetrieveUpdateDestroyAPIView ): permission_classes = [ IsAuthenticated ] serializer_class = ReaderSerializer queryset = Instance . objects . all () #\u0431\u0440\u043e\u043d\u044c \u043a\u043d\u0438\u0433\u0438 class BookInstance ( CreateAPIView ): serializer_class = ReaderBookSerializer queryset = ReaderBook . objects . all () permission_classes = [ IsAuthenticated ] def perform_create ( self , serializer ): serializer . save ( librarian = self . request . user ) #\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043d\u0430\u0442 class RoomListAPIView ( ListAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () permission_classes = [ IsAuthenticated ] #\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 class RoomCreateAPIView ( CreateAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () permission_classes = [ IsAuthenticated ] #\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442 class OneRoom ( RetrieveUpdateDestroyAPIView ): serializer_class = RoomSerializer queryset = Room . objects . all () permission_classes = [ IsAuthenticated ] #\u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439 class RoomBook ( CreateAPIView ): serializer_class = BookRoomSerializer queryset = BookRoom . objects . all () permission_classes = [ IsAuthenticated ] def perform_create ( self , serializer ): serializer . save ( librarian = self . request . user ) #\u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439 class RoomReader ( CreateAPIView ): serializer_class = ReaderRoomSerializer queryset = ReaderRoom . objects . all () permission_classes = [ IsAuthenticated ] def perform_create ( self , serializer ): serializer . save ( librarian = self . request . user ) serializers.py - \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0435\u0439 \u0411\u0414 \u0432 \u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Python class ReaderSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'books' ) class Meta : model = Reader fields = \"__all__\" class BookSerializer ( serializers . ModelSerializer ): class Meta : model = Book fields = \"__all__\" class InstanceSerializer ( serializers . ModelSerializer ): class Meta : model = Instance fields = \"__all__\" class ReaderBookSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderBook fields = \"__all__\" class RoomSerializer ( serializers . ModelSerializer ): books = serializers . SlugRelatedField ( read_only = True , many = True , slug_field = 'name' ) class Meta : model = Room fields = \"__all__\" class BookRoomSerializer ( serializers . ModelSerializer ): class Meta : model = BookRoom fields = \"__all__\" class ReaderRoomSerializer ( serializers . ModelSerializer ): class Meta : model = ReaderRoom fields = \"__all__\" urls.py - \u0441\u0432\u044f\u0437\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0438 url - \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 urlpatterns = [ path ( 'readers/list/' , ReaderListAPIView . as_view ()), path ( 'readers/create/' , CreateReader . as_view ()), path ( 'readers/<int:pk>/' , OneReader . as_view ()), path ( 'books/list/' , BookListAPIView . as_view ()), path ( 'books/create/' , CreateBook . as_view ()), path ( 'books/<int:pk>/' , OneBook . as_view ()), path ( 'inst/list/' , InstanceListAPIView . as_view ()), path ( 'inst/create/' , CreateInstance . as_view ()), path ( 'inst/<int:pk>/' , OneInstance . as_view ()), path ( 'rooms/list/' , RoomListAPIView . as_view ()), path ( 'rooms/<int:pk>/' , OneRoom . as_view ()), path ( 'rooms/create/' , RoomCreateAPIView . as_view ()), path ( 'book/inst/' , BookInstance . as_view ()), path ( 'book/room/' , RoomBook . as_view ()), path ( 'book/readers/' , RoomReader . as_view ()), ]","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0441 \u043a\u043e\u0434\u043e\u043c"},{"location":"lr3/#api","text":"\u041c\u0435\u0442\u043e\u0434 HTTP \u0437\u0430\u043f\u0440\u043e\u0441 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 auth_token_login_create POST /auth/token/login/ \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 auth_token_logout_create POST /auth/token/logout/ \u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b auth_users_activation POST /auth/users/activation/ \u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 auth_users_create POST /auth/users/ \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f auth_users_delete DELETE /auth/users/{id}/ \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f auth_users_list GET /auth/users/ \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 auth_users_me_delete DELETE /auth/users/me/ \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f auth_users_me_update PUT /auth/users/me/ \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 auth_users_me_read GET /auth/users/me/ \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 auth_users_read GET /auth/users/{id}/ \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e id auth_users_resend_activation POST /auth/users/resend_activation/ \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0438\u0441\u044c\u043c\u0430 \u043f\u043e \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u0435 auth_users_reset_password POST /auth/users/reset_password/ \u0421\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f auth_users_reset_password_confirm POST /auth/users/reset_password_confirm/ \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f) auth_users_reset_username POST /auth/users/reset_username/ \u0421\u043c\u0435\u043d\u0430 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 auth_users_reset_username_confirm POST /auth/users/reset_username_confirm/ \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043c\u0435\u043d\u044b \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 (\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441\u043c\u0435\u043d\u044b \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430) auth_users_set_password POST /auth/users/set_password/ \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f auth_users_set_username POST /api/auth/users/set_username/ \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u0430 auth_users_update PUT /auth/users/{id}/ \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e id library_readers_list GET /library/readers/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 library_readers_create POST /library/readers/create/ \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f library_readers_read GET /library/readers/read/{id} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435 library_readers_partial_update PUTCH /library/readers/{id} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 library_readers_delete DELETE /library/readers/{id} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f library_books_list GET /library/books/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 library_books_create POST /library/books/create/ \u041f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f library_books_read GET /library/books/read/{id_book} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0438 library_books_partial_update PUTCH /library/books/{id_book} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0438 library_books_delete DELETE /library/books/{id} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f library_inst_list GET /library/inst/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f library_inst_create POST /library/inst/create/ \u041f\u043e\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 library_inst_read GET /library/inst/read/{id_instance} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0435 library_inst_partial_update PUTCH /library/inst/{id_instance} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0435 library_inst_delete DELETE /library/inst/{id_instance} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 library_rooms_list GET /library/rooms/list/ \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 library_rooms_create POST /library/rooms/create/ \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 library_rooms_read GET /library/rooms/read/{id_instance} \u0412\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 library_rooms_partial_update PUTCH /library/rooms/{id} \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u0435 library_rooms_delete DELETE /library/rooms/{id} \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b library_book_inst POST /library/book/inst/ \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u043c library_book_readers POST /library/book/readers/ \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439 library_book_room POST /library/book/room/ \u0417\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u0437\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439","title":"API"},{"location":"prac31/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1 Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class Car_owner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) birth_day = models . DateField ( null = True ) class Car ( models . Model ): id_car = models . IntegerField ( primary_key = True ) state_number = models . CharField ( max_length = 15 , null = False ) mark_car = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = True ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Car_owner , on_delete = models . CASCADE , related_name = 'owner' ) id_car = models . ForeignKey ( Car , on_delete = models . CASCADE , related_name = 'car' ) start_date = models . DateField () end_date = models . DateField ( null = True ) class Driver_license ( models . Model ): id_license = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Car_owner , on_delete = models . CASCADE , related_name = 'car_owner' ) license_number = models . CharField ( max_length = 10 , null = False ) category = models . CharField ( max_length = 10 , null = False ) date_of_license = models . DateField () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0430\u0432 \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"prac31/#no31","text":"Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435.","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163.1"},{"location":"prac31/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. models.py - \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 class Car_owner ( models . Model ): id_owner = models . IntegerField ( primary_key = True ) last_name = models . CharField ( max_length = 30 , null = False ) first_name = models . CharField ( max_length = 30 , null = False ) birth_day = models . DateField ( null = True ) class Car ( models . Model ): id_car = models . IntegerField ( primary_key = True ) state_number = models . CharField ( max_length = 15 , null = False ) mark_car = models . CharField ( max_length = 20 , null = False ) model_car = models . CharField ( max_length = 20 , null = False ) color = models . CharField ( max_length = 30 , null = True ) class Ownership ( models . Model ): id_owner_car = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Car_owner , on_delete = models . CASCADE , related_name = 'owner' ) id_car = models . ForeignKey ( Car , on_delete = models . CASCADE , related_name = 'car' ) start_date = models . DateField () end_date = models . DateField ( null = True ) class Driver_license ( models . Model ): id_license = models . IntegerField ( primary_key = True ) id_owner = models . ForeignKey ( Car_owner , on_delete = models . CASCADE , related_name = 'car_owner' ) license_number = models . CharField ( max_length = 10 , null = False ) category = models . CharField ( max_length = 10 , null = False ) date_of_license = models . DateField ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"prac31/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0438\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0430\u0432 \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439"},{"location":"prac31/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435):","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"prac31/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f:","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"}]}